/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.time.LocalDate;
import java.util.function.Function;

import jooq.Keys;
import jooq.StudentsDb;
import jooq.tables.records.StudentsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Students extends TableImpl<StudentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>students_db.students</code>
     */
    public static final Students STUDENTS = new Students();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentsRecord> getRecordType() {
        return StudentsRecord.class;
    }

    /**
     * The column <code>students_db.students.id</code>.
     */
    public final TableField<StudentsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>students_db.students.idNumber</code>.
     */
    public final TableField<StudentsRecord, String> IDNUMBER = createField(DSL.name("idNumber"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>students_db.students.firstName</code>.
     */
    public final TableField<StudentsRecord, String> FIRSTNAME = createField(DSL.name("firstName"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>students_db.students.lastName</code>.
     */
    public final TableField<StudentsRecord, String> LASTNAME = createField(DSL.name("lastName"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>students_db.students.registrationDate</code>.
     */
    public final TableField<StudentsRecord, LocalDate> REGISTRATIONDATE = createField(DSL.name("registrationDate"), SQLDataType.LOCALDATE, this, "");

    private Students(Name alias, Table<StudentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Students(Name alias, Table<StudentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>students_db.students</code> table reference
     */
    public Students(String alias) {
        this(DSL.name(alias), STUDENTS);
    }

    /**
     * Create an aliased <code>students_db.students</code> table reference
     */
    public Students(Name alias) {
        this(alias, STUDENTS);
    }

    /**
     * Create a <code>students_db.students</code> table reference
     */
    public Students() {
        this(DSL.name("students"), null);
    }

    public <O extends Record> Students(Table<O> child, ForeignKey<O, StudentsRecord> key) {
        super(child, key, STUDENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : StudentsDb.STUDENTS_DB;
    }

    @Override
    public Identity<StudentsRecord, Integer> getIdentity() {
        return (Identity<StudentsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StudentsRecord> getPrimaryKey() {
        return Keys.KEY_STUDENTS_PRIMARY;
    }

    @Override
    public Students as(String alias) {
        return new Students(DSL.name(alias), this);
    }

    @Override
    public Students as(Name alias) {
        return new Students(alias, this);
    }

    @Override
    public Students as(Table<?> alias) {
        return new Students(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(String name) {
        return new Students(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(Name name) {
        return new Students(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(Table<?> name) {
        return new Students(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, LocalDate> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Integer, ? super String, ? super String, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Integer, ? super String, ? super String, ? super String, ? super LocalDate, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
