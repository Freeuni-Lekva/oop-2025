/*
 * This file is generated by jOOQ.
 */
package jooq.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.Indexes;
import jooq.Keys;
import jooq.StudentsDb;
import jooq.tables.records.StudentCoursesRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentCourses extends TableImpl<StudentCoursesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>students_db.student_courses</code>
     */
    public static final StudentCourses STUDENT_COURSES = new StudentCourses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentCoursesRecord> getRecordType() {
        return StudentCoursesRecord.class;
    }

    /**
     * The column <code>students_db.student_courses.student_id</code>.
     */
    public final TableField<StudentCoursesRecord, Integer> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>students_db.student_courses.course_id</code>.
     */
    public final TableField<StudentCoursesRecord, Integer> COURSE_ID = createField(DSL.name("course_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private StudentCourses(Name alias, Table<StudentCoursesRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentCourses(Name alias, Table<StudentCoursesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>students_db.student_courses</code> table
     * reference
     */
    public StudentCourses(String alias) {
        this(DSL.name(alias), STUDENT_COURSES);
    }

    /**
     * Create an aliased <code>students_db.student_courses</code> table
     * reference
     */
    public StudentCourses(Name alias) {
        this(alias, STUDENT_COURSES);
    }

    /**
     * Create a <code>students_db.student_courses</code> table reference
     */
    public StudentCourses() {
        this(DSL.name("student_courses"), null);
    }

    public <O extends Record> StudentCourses(Table<O> child, ForeignKey<O, StudentCoursesRecord> key) {
        super(child, key, STUDENT_COURSES);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : StudentsDb.STUDENTS_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STUDENT_COURSES_COURSE_ID);
    }

    @Override
    public UniqueKey<StudentCoursesRecord> getPrimaryKey() {
        return Keys.KEY_STUDENT_COURSES_PRIMARY;
    }

    @Override
    public List<ForeignKey<StudentCoursesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_COURSES_IBFK_1, Keys.STUDENT_COURSES_IBFK_2);
    }

    private transient Students _students;
    private transient Courses _courses;

    /**
     * Get the implicit join path to the <code>students_db.students</code>
     * table.
     */
    public Students students() {
        if (_students == null)
            _students = new Students(this, Keys.STUDENT_COURSES_IBFK_1);

        return _students;
    }

    /**
     * Get the implicit join path to the <code>students_db.courses</code> table.
     */
    public Courses courses() {
        if (_courses == null)
            _courses = new Courses(this, Keys.STUDENT_COURSES_IBFK_2);

        return _courses;
    }

    @Override
    public StudentCourses as(String alias) {
        return new StudentCourses(DSL.name(alias), this);
    }

    @Override
    public StudentCourses as(Name alias) {
        return new StudentCourses(alias, this);
    }

    @Override
    public StudentCourses as(Table<?> alias) {
        return new StudentCourses(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentCourses rename(String name) {
        return new StudentCourses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentCourses rename(Name name) {
        return new StudentCourses(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentCourses rename(Table<?> name) {
        return new StudentCourses(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
